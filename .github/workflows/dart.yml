name: 🚀 发布

on:
  workflow_dispatch:
    inputs:
      base_branch:
        description: '基础分支 (例如: v0.0.0)'
        required: true
        default: 'v1.'
        type: string
      head_branch:
        description: '目标分支 (例如: main)'
        required: true
        default: 'main'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    # 调整 GITHUB_TOKEN 的权限
    permissions:
      contents: write  # 允许写入仓库内容（上传文件）
      actions: read    # 允许读取工作流程

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录，以便比较分支
        
      - name: 📦 下载 armeabi-v7a 构件
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: "android-build-armv7.yaml"
          name: app-release-armeabi-v7a
          path: ./downloaded/armeabi-v7a
          search_artifacts: true
          if_no_artifact_found: warn
      - run: mv ./downloaded/armeabi-v7a/* ./downloaded/armeabi-v7a/app-release-armeabi-v7a.apk

      - name: 📦 下载 arm64-v8a 构件
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: "android-build-arm64.yaml"
          name: app-release-arm64-v8a
          path: ./downloaded/arm64-v8a
          search_artifacts: true
          if_no_artifact_found: warn
      - run: mv ./downloaded/arm64-v8a/* ./downloaded/arm64-v8a/app-release-arm64-v8a.apk

      - name: 📦 下载全架构构件
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: "android-build-all.yaml"
          name: app-release-all
          path: ./downloaded/all
          search_artifacts: true
          if_no_artifact_found: warn
      - run: mv ./downloaded/all/* ./downloaded/all/app-release-all.apk

      - name: 📦 下载 x86_64 构件
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: "android-build-x86_64.yaml"
          name: app-release-x86_64
          path: ./downloaded/x86_64
          search_artifacts: true
          if_no_artifact_found: warn
      - run: mv ./downloaded/x86_64/* ./downloaded/x86_64/app-release-x86_64.apk

      - name: 📦 下载 Windows 构件
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: "windows-build.yml"
          name: release
          path: ./downloaded/windows
          search_artifacts: true
          if_no_artifact_found: warn
          
      - name: 📝 列出下载的文件
        run: |
          echo "已下载的文件列表:"
          ls -la ./downloaded
          echo "armeabi-v7a 文件:"
          ls -la ./downloaded/armeabi-v7a || echo "目录不存在"
          echo "arm64-v8a 文件:"
          ls -la ./downloaded/arm64-v8a || echo "目录不存在"
          echo "所有架构文件:"
          ls -la ./downloaded/all || echo "目录不存在"
          echo "x86_64 文件:"
          ls -la ./downloaded/x86_64 || echo "目录不存在"
          echo "Windows 文件:"
          ls -la ./downloaded/windows || echo "目录不存在"
          
      - name: 🤖 生成分支差异提交内容
        id: generate_changelog
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE }}
        run: |
          # 获取两个分支之间的提交信息
          COMMITS=$(git log --pretty=format:"%h - %s (%an)" ${{ github.event.inputs.base_branch }}..${{ github.event.inputs.head_branch }})
          
          # 将提交信息保存到文件
          echo "$COMMITS" > commits.txt
          
          # 安装 Python 和必要的库
          pip install google-generativeai
          
          # 创建 Python 脚本生成更新日志
          cat > generate_changelog.py << EOF
          import google.generativeai as genai
          import os
          import sys
          
          try:
              api_key = os.environ.get('GOOGLE_API_KEY')
              if not api_key:
                  print("Error: GOOGLE_API_KEY environment variable not found")
                  sys.exit(1)
                  
              # 配置 API 密钥
              genai.configure(api_key=api_key)
              
              # 读取提交信息
              with open('commits.txt', 'r') as f:
                  commits = f.read()
              
              if not commits.strip():
                  print("No commits found between specified branches")
                  with open('CHANGELOG.md', 'w') as f:
                      f.write("# 更新日志\n\n无更新内容")
                  sys.exit(0)
              
              # 设置模型和生成参数
              model = genai.GenerativeModel('gemini-1.5-flash')
              prompt = f"""
              请根据以下提交记录生成更新日志：

              ## 提交记录
              {commits}

              要求：
              1. 使用简洁的标题概括主要更新
              2. 按以下分类整理更新内容：
                 - 🚀 新功能
                 - 🔧 修复
                 - 🌟 优化
              3. 每项内容简明扼要
              4. 使用项目符号列表
              """
              
              # 生成更新日志
              response = model.generate_content(prompt)
              
              # 保存结果
              with open('CHANGELOG.md', 'w') as f:
                  f.write("# 更新日志\n\n")
                  f.write(response.text)
                  
          except Exception as e:
              print(f"Error: {str(e)}")
              sys.exit(1)
          EOF
          
          # 执行 Python 脚本
          python generate_changelog.py
          
          # 将更新日志内容设置为输出变量
          CHANGELOG=$(cat CHANGELOG.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: 🚀 创建草稿发布
        uses: softprops/action-gh-release@v1
        with:
          name: 发布 ${{ github.event.inputs.head_branch }}
          tag_name: release-${{ github.run_number }}
          body: ${{ steps.generate_changelog.outputs.changelog }}
          draft: true  # 设置为草稿状态
          prerelease: true  # 标记为预发布版本
          files: |
            ./downloaded/armeabi-v7a/*.apk
            ./downloaded/arm64-v8a/*.apk
            ./downloaded/all/*.apk
            ./downloaded/x86_64/*.apk
            ./downloaded/windows/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
